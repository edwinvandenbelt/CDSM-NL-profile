# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.geometry import Geometry  # noqa: F401,E501
from swagger_server.models.point3_d import Point3D  # noqa: F401,E501
from swagger_server import util


class MultiPoint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, coordinates: List[Point3D]=None):  # noqa: E501
        """MultiPoint - a model defined in Swagger

        :param type: The type of this MultiPoint.  # noqa: E501
        :type type: str
        :param coordinates: The coordinates of this MultiPoint.  # noqa: E501
        :type coordinates: List[Point3D]
        """
        self.swagger_types = {
            'type': str,
            'coordinates': List[Point3D]
        }

        self.attribute_map = {
            'type': 'type',
            'coordinates': 'coordinates'
        }
        self._type = type
        self._coordinates = coordinates

    @classmethod
    def from_dict(cls, dikt) -> 'MultiPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The multiPoint of this MultiPoint.  # noqa: E501
        :rtype: MultiPoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this MultiPoint.

        the geometry type  # noqa: E501

        :return: The type of this MultiPoint.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MultiPoint.

        the geometry type  # noqa: E501

        :param type: The type of this MultiPoint.
        :type type: str
        """
        allowed_values = ["point", "lineString", "polygon", "multiPoint", "multiLineString", "multiPolygon"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def coordinates(self) -> List[Point3D]:
        """Gets the coordinates of this MultiPoint.


        :return: The coordinates of this MultiPoint.
        :rtype: List[Point3D]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: List[Point3D]):
        """Sets the coordinates of this MultiPoint.


        :param coordinates: The coordinates of this MultiPoint.
        :type coordinates: List[Point3D]
        """

        self._coordinates = coordinates
