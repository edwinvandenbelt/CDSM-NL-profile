# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Rule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, vehicle_type_id: str=None, ride_allowed: bool=False, ride_end_allowed: bool=True):  # noqa: E501
        """Rule - a model defined in Swagger

        :param vehicle_type_id: The vehicle_type_id of this Rule.  # noqa: E501
        :type vehicle_type_id: str
        :param ride_allowed: The ride_allowed of this Rule.  # noqa: E501
        :type ride_allowed: bool
        :param ride_end_allowed: The ride_end_allowed of this Rule.  # noqa: E501
        :type ride_end_allowed: bool
        """
        self.swagger_types = {
            'vehicle_type_id': str,
            'ride_allowed': bool,
            'ride_end_allowed': bool
        }

        self.attribute_map = {
            'vehicle_type_id': 'vehicle_type_id',
            'ride_allowed': 'ride_allowed',
            'ride_end_allowed': 'ride_end_allowed'
        }
        self._vehicle_type_id = vehicle_type_id
        self._ride_allowed = ride_allowed
        self._ride_end_allowed = ride_end_allowed

    @classmethod
    def from_dict(cls, dikt) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The rule of this Rule.  # noqa: E501
        :rtype: Rule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vehicle_type_id(self) -> str:
        """Gets the vehicle_type_id of this Rule.


        :return: The vehicle_type_id of this Rule.
        :rtype: str
        """
        return self._vehicle_type_id

    @vehicle_type_id.setter
    def vehicle_type_id(self, vehicle_type_id: str):
        """Sets the vehicle_type_id of this Rule.


        :param vehicle_type_id: The vehicle_type_id of this Rule.
        :type vehicle_type_id: str
        """

        self._vehicle_type_id = vehicle_type_id

    @property
    def ride_allowed(self) -> bool:
        """Gets the ride_allowed of this Rule.


        :return: The ride_allowed of this Rule.
        :rtype: bool
        """
        return self._ride_allowed

    @ride_allowed.setter
    def ride_allowed(self, ride_allowed: bool):
        """Sets the ride_allowed of this Rule.


        :param ride_allowed: The ride_allowed of this Rule.
        :type ride_allowed: bool
        """

        self._ride_allowed = ride_allowed

    @property
    def ride_end_allowed(self) -> bool:
        """Gets the ride_end_allowed of this Rule.


        :return: The ride_end_allowed of this Rule.
        :rtype: bool
        """
        return self._ride_end_allowed

    @ride_end_allowed.setter
    def ride_end_allowed(self, ride_end_allowed: bool):
        """Sets the ride_end_allowed of this Rule.


        :param ride_end_allowed: The ride_end_allowed of this Rule.
        :type ride_end_allowed: bool
        """

        self._ride_end_allowed = ride_end_allowed
