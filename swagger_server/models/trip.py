# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.gps import Gps  # noqa: F401,E501
from swagger_server.models.uuid import Uuid  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Trip(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, provider_id: Uuid=None, device_id: Uuid=None, trip_id: Uuid=None, start_time: str=None, end_time: str=None, start_location: Gps=None, end_location: Gps=None, duration: float=None, distance: float=None):  # noqa: E501
        """Trip - a model defined in Swagger

        :param provider_id: The provider_id of this Trip.  # noqa: E501
        :type provider_id: Uuid
        :param device_id: The device_id of this Trip.  # noqa: E501
        :type device_id: Uuid
        :param trip_id: The trip_id of this Trip.  # noqa: E501
        :type trip_id: Uuid
        :param start_time: The start_time of this Trip.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this Trip.  # noqa: E501
        :type end_time: str
        :param start_location: The start_location of this Trip.  # noqa: E501
        :type start_location: Gps
        :param end_location: The end_location of this Trip.  # noqa: E501
        :type end_location: Gps
        :param duration: The duration of this Trip.  # noqa: E501
        :type duration: float
        :param distance: The distance of this Trip.  # noqa: E501
        :type distance: float
        """
        self.swagger_types = {
            'provider_id': Uuid,
            'device_id': Uuid,
            'trip_id': Uuid,
            'start_time': str,
            'end_time': str,
            'start_location': Gps,
            'end_location': Gps,
            'duration': float,
            'distance': float
        }

        self.attribute_map = {
            'provider_id': 'provider_id',
            'device_id': 'device_id',
            'trip_id': 'trip_id',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'start_location': 'start_location',
            'end_location': 'end_location',
            'duration': 'duration',
            'distance': 'distance'
        }
        self._provider_id = provider_id
        self._device_id = device_id
        self._trip_id = trip_id
        self._start_time = start_time
        self._end_time = end_time
        self._start_location = start_location
        self._end_location = end_location
        self._duration = duration
        self._distance = distance

    @classmethod
    def from_dict(cls, dikt) -> 'Trip':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The trip of this Trip.  # noqa: E501
        :rtype: Trip
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provider_id(self) -> Uuid:
        """Gets the provider_id of this Trip.


        :return: The provider_id of this Trip.
        :rtype: Uuid
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: Uuid):
        """Sets the provider_id of this Trip.


        :param provider_id: The provider_id of this Trip.
        :type provider_id: Uuid
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def device_id(self) -> Uuid:
        """Gets the device_id of this Trip.


        :return: The device_id of this Trip.
        :rtype: Uuid
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: Uuid):
        """Sets the device_id of this Trip.


        :param device_id: The device_id of this Trip.
        :type device_id: Uuid
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def trip_id(self) -> Uuid:
        """Gets the trip_id of this Trip.


        :return: The trip_id of this Trip.
        :rtype: Uuid
        """
        return self._trip_id

    @trip_id.setter
    def trip_id(self, trip_id: Uuid):
        """Sets the trip_id of this Trip.


        :param trip_id: The trip_id of this Trip.
        :type trip_id: Uuid
        """
        if trip_id is None:
            raise ValueError("Invalid value for `trip_id`, must not be `None`")  # noqa: E501

        self._trip_id = trip_id

    @property
    def start_time(self) -> str:
        """Gets the start_time of this Trip.

        Required  Start of the passenger/driver trip  # noqa: E501

        :return: The start_time of this Trip.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this Trip.

        Required  Start of the passenger/driver trip  # noqa: E501

        :param start_time: The start_time of this Trip.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this Trip.

        End of the passenger/driver trip  # noqa: E501

        :return: The end_time of this Trip.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this Trip.

        End of the passenger/driver trip  # noqa: E501

        :param end_time: The end_time of this Trip.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def start_location(self) -> Gps:
        """Gets the start_location of this Trip.


        :return: The start_location of this Trip.
        :rtype: Gps
        """
        return self._start_location

    @start_location.setter
    def start_location(self, start_location: Gps):
        """Sets the start_location of this Trip.


        :param start_location: The start_location of this Trip.
        :type start_location: Gps
        """
        if start_location is None:
            raise ValueError("Invalid value for `start_location`, must not be `None`")  # noqa: E501

        self._start_location = start_location

    @property
    def end_location(self) -> Gps:
        """Gets the end_location of this Trip.


        :return: The end_location of this Trip.
        :rtype: Gps
        """
        return self._end_location

    @end_location.setter
    def end_location(self, end_location: Gps):
        """Sets the end_location of this Trip.


        :param end_location: The end_location of this Trip.
        :type end_location: Gps
        """
        if end_location is None:
            raise ValueError("Invalid value for `end_location`, must not be `None`")  # noqa: E501

        self._end_location = end_location

    @property
    def duration(self) -> float:
        """Gets the duration of this Trip.

        Time, in Seconds  # noqa: E501

        :return: The duration of this Trip.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration: float):
        """Sets the duration of this Trip.

        Time, in Seconds  # noqa: E501

        :param duration: The duration of this Trip.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def distance(self) -> float:
        """Gets the distance of this Trip.

        Trip Distance, in Meters  # noqa: E501

        :return: The distance of this Trip.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of this Trip.

        Trip Distance, in Meters  # noqa: E501

        :param distance: The distance of this Trip.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance
