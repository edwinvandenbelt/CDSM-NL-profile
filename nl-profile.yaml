openapi: 3.0.0

info:
  title: Dutch profile for data exchange between shared mobility providers and municipalities.
  version: "1.0"
  description: Mainly based on MDS 2.0 (OMF). Contains also a GBFS endpoint.
  contact:
    url: https://github.com/openmobilityfoundation/mobility-data-specification
    name: Open Mobility Foundation
    email: info@openmobilityfoundation.org

paths:
  /trips/{end_time}:
    parameters:
      - $ref: "#/components/parameters/end_time"
    get:
      summary: Query historical trip data.
      responses:
        "200":
          description: Hour has been processed.
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/trips"
        "202":
          description: Hours that are in the past but for which data is not yet available
        "404":
          description: Hours that are not yet in the past or hours in which the provider was not operating
      description: Get all trips with an end time occurring within the hour.
  
  /vehicles:
    get:
      summary: Query vehicle data.
      responses:
        "200":
          description: current vehicle data
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/vehicles"
        "404":
          description: Vehicle not found.

  /vehicles/status:
    get:
      summary: Query vehicle status data. Only provides vehicles with status 'available'
      responses:
        "200":
          description: vehicle status data
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/statusses"
        "404":
          description: Vehicle not found.       

  /geofencing_zones:
    get: 
      summary: return the operational area, according to the shared mobility provider
      description: The provider must offer the GBFS /geofencing_zones.json file (https://github.com/MobilityData/gbfs/blob/v2.3/gbfs.md#geofencing_zonesjson).
      responses:
        "200":
          description: geoJSON formatted zones
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/geofencing_zones"

components:
  parameters:
    end_time:
      in: path
      name: end_time
      required: true
      schema:
        $ref: "#/components/schemas/iso_dayhour"
        format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional weights as described in IETF RFC7231 section 5.3.5
      description: A list of the languages/localizations the user would like to see the results in. For user privacy and ease of use on the TO side, this list should be kept as short as possible, ideally just one language tag from the list in operator/information

  schemas:
    statusses:
      type: object
      required:
      - version
      - vehicles_status
      - links
      properties:
        version:
          type: string
        vehicles_status: 
          type: array
          items:
            $ref: "#/components/schemas/status"
        links:
          $ref: "#/components/schemas/links"

    status:
      type: object
      required:
      - device_id
      - provider_id
      - last_event
      - last_telemetry
      properties:
        device_id:
          $ref: "#/components/schemas/uuid"
          description: A unique device ID in UUID format
        provider_id:
          $ref: "#/components/schemas/uuid"
          description: A UUID for the Provider, unique within MDS. See MDS provider list.
        last_event:
          $ref: "#/components/schemas/event"
          description: Most recent Event for this device based on timestamp
        last_telemetry:
          $ref: "#/components/schemas/telemetry"
          description: Most recent Telemetry for this device based on timestamp

    telemetry:
      type: object
      required: 
      - device_id
      - provider_id
      - telemetry_id
      - timestamp
      - trip_ids
      - journey_id
      - location
      properties:
        device_id:
          $ref: "#/components/schemas/uuid"
          description: A unique device ID in UUID format
        provider_id:
          $ref: "#/components/schemas/uuid"
          description: A UUID for the Provider, unique within MDS. See MDS provider list.
        telemetry_id:
          $ref: "#/components/schemas/uuid"
          description: ID used for uniquely-identifying a Telemetry entry
        timestamp:
          type: string
          format: $date-time
        trip_ids:
          type: array
          items:
            $ref: "#/components/schemas/uuid"
          description: If telemetry occurred during a trip, the ID of the trip(s). If not in a trip, null. (in NL profile, this must always be null)
        journey_id: 
          $ref: "#/components/schemas/uuid"
          description: If telemetry occurred during a trip and journeys are used for the mode, the ID of the journey. If not in a trip, null. (in NL profile, this must always be null)
        location:
          $ref: "#/components/schemas/gps"

    event:
      type: object
      required:
      - device_id
      - provider_id
      - event_id
      - vehicle_state
      - event_types
      - timestamp
      - location
      properties:
        device_id:
          $ref: "#/components/schemas/uuid"
          description: A unique device ID in UUID format
        provider_id:
          $ref: "#/components/schemas/uuid"
          description: A UUID for the Provider, unique within MDS. See MDS provider list.
        event_id:
          $ref: "#/components/schemas/uuid"
          description: A unique event ID
        vehicle_state:
          type: string
          enum: [removed, available, non_operational, reserved, on_trip, stopped, non_contactable, missing, elsewhere] 
          description: See vehicle state table (in NL profile, it should be 'available')
        event_types:
          type: array
          items:
            type: string
            enum: [agency_drop_off, agency_pick_up, battery_charged, battery_low, changed_geographies, charging_start, charging_end, comms_lost, comms_restored, compliance_pick_up, customer_cancellation, decommissioned, driver_cancellation, fueling_start, fueling_end, located, maintenance, maintenance_pick_up, maintenance_end, not_located, off_hours, on_hours, order_drop_off, order_pick_up, provider_cancellation, provider_drop_off, rebalance_pick_up, remote_start, remote_end, reservation_cancel, reservation_start, reservation_stop, system_resume, system_suspend, trip_cancel, trip_end, trip_enter_jurisdiction, trip_leave_jurisdiction, trip_start, trip_pause, trip_resume, unspecified]
          description: Vehicle event types for state change, with allowable values determined by vehicle_state
        timestamp:
          type: string
          format: $date-time
          description: Date/time that event occurred at. See Event Times
        publication_time:
          type: string
          format: $date-time
          description: Date/time that event became available through the status changes endpoint
        location:
          $ref: "#/components/schemas/gps"
          description: See also Stop-based Geographic Data.
        battery_percent:
          type: integer
          description: Required if Applicable	Percent battery charge of vehicle, expressed between 0 and 100
        fuel_percent:
          type: integer
          description: Required if Applicable	Percent fuel in vehicle, expressed between 0 and 100

    vehicles:
      type: object
      properties:
        version:
          type: string
        vehicles:
          type: array
          items:
            $ref: "#/components/schemas/vehicle"
        links:
          $ref: "#/components/schemas/links"

    vehicle:
      type: object
      required:
        - device_id
        - provider_id
        - vehicle_id
        - vehicle_type
        - propulsion_types
      properties:
        device_id:
          $ref: "#/components/schemas/uuid"
          description: A unique device ID in UUID format, should match this device in Provider
        provider_id:
          $ref: "#/components/schemas/uuid"
          description: A UUID for the Provider, unique within MDS. See MDS provider list.
        data_provider_id:
          $ref: "#/components/schemas/uuid"
          description: If different than provider_id, a UUID for the data solution provider managing the data feed in this endpoint. See MDS provider list which includes both service operators and data solution providers.
        vehicle_id:
          type: string
          description: A unique vehicle identifier (visible code, license plate, etc), visible on the vehicle itself
        vehicle_type:
          $ref: "#/components/schemas/vehicle_type"
          description: The vehicle type
        propulsion_types:
          type: array
          items: 
            type: string
            description: Required	Array of propulsion types; allows multiple values
            enum: 
              [human,electric_assist,electric,combustion,combustion_diesel,hybrid,hydrogen_fuel_cell,plug_in_hybrid]
        battery_capacity: 
          type: integer
          description: Required if Available	Capacity of battery expressed as milliamp hours (mAh)
        fuel_capacity:
          type: integer
          description: Required if Available	Capacity of fuel tank (liquid, solid, gaseous) expressed in liters
        maximum_speed:
          type: integer
          description: Required if Available	Maximum speed (kph) possible with vehicle under normal, flat incline, smooth surface conditions. Applicable if the device has a built-in or intelligent speed limiter/governor.      

    vehicle_type:
      type: string
      enum: [bicycle,bus,cargo_bicycle,car,delivery_robot,moped,motorcycle,scooter_standing,scooter_seated,truck,other]
      
    trip:
      type: object
      required:
        - provider_id
        - device_id
        - trip_id
        - start_time
        - end_time
        - start_location
        - end_location
        - duration
        - distance
      properties:
        provider_id:
          $ref: "#/components/schemas/uuid"
          description: A UUID for the Provider, unique within MDS. See MDS provider list.
        device_id:
          $ref: "#/components/schemas/uuid"
          description: A unique device ID in UUID format. Cross reference with /vehicles for more device details.
        trip_id:
          $ref: "#/components/schemas/uuid"
          description: A unique ID for each trip
        start_time:
          type: string
          format: $date-time
          description: Required	Start of the passenger/driver trip
        end_time:
          type: string
          format: $date-time
          description: End of the passenger/driver trip
        start_location:
          $ref: "#/components/schemas/gps"
          description: Location of the start of the trip.
        end_location:
          $ref: "#/components/schemas/gps"
          description: Location of the end of the trip.
        duration:
          type: number
          description: Time, in Seconds
        distance:
          type: number
          description: Trip Distance, in Meters

    gps:
      type: object
      required:
        - lat
        - lng
      properties:
        lat:
          type: number
          description: Latitude of the location
        lng:
          type: number
          description: Longitude of the location

    trips:
      type: object
      properties:
        version:
          type: string
        trips:
          type: object
          properties:
            version: 
              type: string
              default: "2.0.0"
            trips:
              type: array
              items:
                $ref: "#/components/schemas/trip"

    geofencing_zones:
      type: object
      properties:
        last_updated:
          type: number
        ttl: 
          type: number
        version: 
          type: string
          default: "2.3"
        data:
          type: object
          properties:
            geofencing_zones:
              $ref: "#/components/schemas/featureCollection"

    geometry:
      type: object
      description: GeoJSon geometry
      required:
        - type
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometry-objects
      properties:
        type:
          type: string
          enum:
          - point
          - lineString
          - polygon
          - multiPoint
          - multiLineString
          - multiPolygon
          description: the geometry type

    point3D:
      type: array
      description: Point in 3D space
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      minItems: 2
      maxItems: 3
      items:
        type: number

    point:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              $ref: '#/components/schemas/point3D'

    lineString:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id3
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/point3D'

    polygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id4
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/point3D'

    multiPoint:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id5
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/point3D'

    multiLineString:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/point3D'

    multiPolygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/point3D'

    feature:
      type: object
      description: GeoJSon Feature
      required:
      - type
      - id
      - geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          type: integer
        geometry:
          oneOf:
          - $ref: '#/components/schemas/point'
          - $ref: '#/components/schemas/lineString'
          - $ref: '#/components/schemas/polygon'
          - $ref: '#/components/schemas/multiPoint'
          - $ref: '#/components/schemas/multiLineString'
          - $ref: '#/components/schemas/multiPolygon'
          discriminator:
            propertyName: type
        properties:
          $ref: '#/components/schemas/featureProperties'
          
    featureProperties:
      type: object
      properties:
        name:
          type: string
        start:
          type: string
          format: $date-time
        end:
          type: string
          format: $date-time
        rules:
          type: array
          items:
            $ref: "#/components/schemas/rule"

    rule:
      type: object
      properties:
        vehicle_type_id:
          type: string
        ride_allowed:
          type: boolean
          default: false
        ride_end_allowed:
          type: boolean
          default: true

    featureCollection:
      type: object
      description: GeoJSon Feature collection
      required:
      - type
      - features
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      properties:
        type:
          type: string
          enum:
          - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/feature'
    
    links: 
      type: object
      properties:
        first: 
          type: string
          format: URI
        last: 
          type: string
          format: URI
        prev: 
          type: string
          format: URI
        next:
          type: string
          format: URI

    uuid:
      type: string
      description: A UUID used to uniquely identity an object.
      example: 3c9604d6-b5ee-11e8-96f8-529269fb1459
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
    
    iso_dayhour:
      type: string
      description: An ISO 8601 extended datetime representing an UTC hour between 00 and 23 `YYYY-MM-DDTHH`; valid for dates in 2018 and later.
      pattern: ^(201[89]|20[2-9]\d|2[1-9]\d{2}|[3-9]\d{3})-(0[1-9]|1[02])-([12]\d|0[1-9]|3[01])T([0-2][0-3]|[01]\d)$
      example: "2023-12-31T23"

  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      description: |-
        All MDS Provider, Agency, and Metrics APIs require authentication. If implementing MDS Policy, Geography, and/or Jurisdiction APIs and endpoints, an agency must make them unauthenticated and public.

        JSON Web Token ([JWT](https://jwt.io/introduction/)) is RECOMMENDED as the token format.

        MDS API producers MAY include any metadata in the JWT they wish that helps to route, log, permission, or debug agency requests, leaving their internal implementation flexible.
