# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.gps import Gps  # noqa: F401,E501
from swagger_server.models.uuid import Uuid  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_id: Uuid=None, provider_id: Uuid=None, event_id: Uuid=None, vehicle_state: str=None, event_types: List[str]=None, timestamp: str=None, publication_time: str=None, location: Gps=None, battery_percent: int=None, fuel_percent: int=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param device_id: The device_id of this Event.  # noqa: E501
        :type device_id: Uuid
        :param provider_id: The provider_id of this Event.  # noqa: E501
        :type provider_id: Uuid
        :param event_id: The event_id of this Event.  # noqa: E501
        :type event_id: Uuid
        :param vehicle_state: The vehicle_state of this Event.  # noqa: E501
        :type vehicle_state: str
        :param event_types: The event_types of this Event.  # noqa: E501
        :type event_types: List[str]
        :param timestamp: The timestamp of this Event.  # noqa: E501
        :type timestamp: str
        :param publication_time: The publication_time of this Event.  # noqa: E501
        :type publication_time: str
        :param location: The location of this Event.  # noqa: E501
        :type location: Gps
        :param battery_percent: The battery_percent of this Event.  # noqa: E501
        :type battery_percent: int
        :param fuel_percent: The fuel_percent of this Event.  # noqa: E501
        :type fuel_percent: int
        """
        self.swagger_types = {
            'device_id': Uuid,
            'provider_id': Uuid,
            'event_id': Uuid,
            'vehicle_state': str,
            'event_types': List[str],
            'timestamp': str,
            'publication_time': str,
            'location': Gps,
            'battery_percent': int,
            'fuel_percent': int
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'provider_id': 'provider_id',
            'event_id': 'event_id',
            'vehicle_state': 'vehicle_state',
            'event_types': 'event_types',
            'timestamp': 'timestamp',
            'publication_time': 'publication_time',
            'location': 'location',
            'battery_percent': 'battery_percent',
            'fuel_percent': 'fuel_percent'
        }
        self._device_id = device_id
        self._provider_id = provider_id
        self._event_id = event_id
        self._vehicle_state = vehicle_state
        self._event_types = event_types
        self._timestamp = timestamp
        self._publication_time = publication_time
        self._location = location
        self._battery_percent = battery_percent
        self._fuel_percent = fuel_percent

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self) -> Uuid:
        """Gets the device_id of this Event.


        :return: The device_id of this Event.
        :rtype: Uuid
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: Uuid):
        """Sets the device_id of this Event.


        :param device_id: The device_id of this Event.
        :type device_id: Uuid
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def provider_id(self) -> Uuid:
        """Gets the provider_id of this Event.


        :return: The provider_id of this Event.
        :rtype: Uuid
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: Uuid):
        """Sets the provider_id of this Event.


        :param provider_id: The provider_id of this Event.
        :type provider_id: Uuid
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def event_id(self) -> Uuid:
        """Gets the event_id of this Event.


        :return: The event_id of this Event.
        :rtype: Uuid
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id: Uuid):
        """Sets the event_id of this Event.


        :param event_id: The event_id of this Event.
        :type event_id: Uuid
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def vehicle_state(self) -> str:
        """Gets the vehicle_state of this Event.

        See vehicle state table (in NL profile, it should be 'available')  # noqa: E501

        :return: The vehicle_state of this Event.
        :rtype: str
        """
        return self._vehicle_state

    @vehicle_state.setter
    def vehicle_state(self, vehicle_state: str):
        """Sets the vehicle_state of this Event.

        See vehicle state table (in NL profile, it should be 'available')  # noqa: E501

        :param vehicle_state: The vehicle_state of this Event.
        :type vehicle_state: str
        """
        allowed_values = ["removed", "available", "non_operational", "reserved", "on_trip", "stopped", "non_contactable", "missing", "elsewhere"]  # noqa: E501
        if vehicle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `vehicle_state` ({0}), must be one of {1}"
                .format(vehicle_state, allowed_values)
            )

        self._vehicle_state = vehicle_state

    @property
    def event_types(self) -> List[str]:
        """Gets the event_types of this Event.

        Vehicle event types for state change, with allowable values determined by vehicle_state  # noqa: E501

        :return: The event_types of this Event.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types: List[str]):
        """Sets the event_types of this Event.

        Vehicle event types for state change, with allowable values determined by vehicle_state  # noqa: E501

        :param event_types: The event_types of this Event.
        :type event_types: List[str]
        """
        allowed_values = ["agency_drop_off", "agency_pick_up", "battery_charged", "battery_low", "changed_geographies", "charging_start", "charging_end", "comms_lost", "comms_restored", "compliance_pick_up", "customer_cancellation", "decommissioned", "driver_cancellation", "fueling_start", "fueling_end", "located", "maintenance", "maintenance_pick_up", "maintenance_end", "not_located", "off_hours", "on_hours", "order_drop_off", "order_pick_up", "provider_cancellation", "provider_drop_off", "rebalance_pick_up", "remote_start", "remote_end", "reservation_cancel", "reservation_start", "reservation_stop", "system_resume", "system_suspend", "trip_cancel", "trip_end", "trip_enter_jurisdiction", "trip_leave_jurisdiction", "trip_start", "trip_pause", "trip_resume", "unspecified"]  # noqa: E501
        if not set(event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(event_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._event_types = event_types

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this Event.

        Date/time that event occurred at. See Event Times  # noqa: E501

        :return: The timestamp of this Event.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this Event.

        Date/time that event occurred at. See Event Times  # noqa: E501

        :param timestamp: The timestamp of this Event.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def publication_time(self) -> str:
        """Gets the publication_time of this Event.

        Date/time that event became available through the status changes endpoint  # noqa: E501

        :return: The publication_time of this Event.
        :rtype: str
        """
        return self._publication_time

    @publication_time.setter
    def publication_time(self, publication_time: str):
        """Sets the publication_time of this Event.

        Date/time that event became available through the status changes endpoint  # noqa: E501

        :param publication_time: The publication_time of this Event.
        :type publication_time: str
        """

        self._publication_time = publication_time

    @property
    def location(self) -> Gps:
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: Gps
        """
        return self._location

    @location.setter
    def location(self, location: Gps):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: Gps
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def battery_percent(self) -> int:
        """Gets the battery_percent of this Event.

        Required if Applicable Percent battery charge of vehicle, expressed between 0 and 100  # noqa: E501

        :return: The battery_percent of this Event.
        :rtype: int
        """
        return self._battery_percent

    @battery_percent.setter
    def battery_percent(self, battery_percent: int):
        """Sets the battery_percent of this Event.

        Required if Applicable Percent battery charge of vehicle, expressed between 0 and 100  # noqa: E501

        :param battery_percent: The battery_percent of this Event.
        :type battery_percent: int
        """

        self._battery_percent = battery_percent

    @property
    def fuel_percent(self) -> int:
        """Gets the fuel_percent of this Event.

        Required if Applicable Percent fuel in vehicle, expressed between 0 and 100  # noqa: E501

        :return: The fuel_percent of this Event.
        :rtype: int
        """
        return self._fuel_percent

    @fuel_percent.setter
    def fuel_percent(self, fuel_percent: int):
        """Sets the fuel_percent of this Event.

        Required if Applicable Percent fuel in vehicle, expressed between 0 and 100  # noqa: E501

        :param fuel_percent: The fuel_percent of this Event.
        :type fuel_percent: int
        """

        self._fuel_percent = fuel_percent
