# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.gps import Gps  # noqa: F401,E501
from swagger_server.models.uuid import Uuid  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Telemetry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_id: Uuid=None, provider_id: Uuid=None, telemetry_id: Uuid=None, timestamp: str=None, trip_ids: List[Uuid]=None, journey_id: Uuid=None, location: Gps=None):  # noqa: E501
        """Telemetry - a model defined in Swagger

        :param device_id: The device_id of this Telemetry.  # noqa: E501
        :type device_id: Uuid
        :param provider_id: The provider_id of this Telemetry.  # noqa: E501
        :type provider_id: Uuid
        :param telemetry_id: The telemetry_id of this Telemetry.  # noqa: E501
        :type telemetry_id: Uuid
        :param timestamp: The timestamp of this Telemetry.  # noqa: E501
        :type timestamp: str
        :param trip_ids: The trip_ids of this Telemetry.  # noqa: E501
        :type trip_ids: List[Uuid]
        :param journey_id: The journey_id of this Telemetry.  # noqa: E501
        :type journey_id: Uuid
        :param location: The location of this Telemetry.  # noqa: E501
        :type location: Gps
        """
        self.swagger_types = {
            'device_id': Uuid,
            'provider_id': Uuid,
            'telemetry_id': Uuid,
            'timestamp': str,
            'trip_ids': List[Uuid],
            'journey_id': Uuid,
            'location': Gps
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'provider_id': 'provider_id',
            'telemetry_id': 'telemetry_id',
            'timestamp': 'timestamp',
            'trip_ids': 'trip_ids',
            'journey_id': 'journey_id',
            'location': 'location'
        }
        self._device_id = device_id
        self._provider_id = provider_id
        self._telemetry_id = telemetry_id
        self._timestamp = timestamp
        self._trip_ids = trip_ids
        self._journey_id = journey_id
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'Telemetry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The telemetry of this Telemetry.  # noqa: E501
        :rtype: Telemetry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self) -> Uuid:
        """Gets the device_id of this Telemetry.


        :return: The device_id of this Telemetry.
        :rtype: Uuid
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: Uuid):
        """Sets the device_id of this Telemetry.


        :param device_id: The device_id of this Telemetry.
        :type device_id: Uuid
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def provider_id(self) -> Uuid:
        """Gets the provider_id of this Telemetry.


        :return: The provider_id of this Telemetry.
        :rtype: Uuid
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: Uuid):
        """Sets the provider_id of this Telemetry.


        :param provider_id: The provider_id of this Telemetry.
        :type provider_id: Uuid
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def telemetry_id(self) -> Uuid:
        """Gets the telemetry_id of this Telemetry.


        :return: The telemetry_id of this Telemetry.
        :rtype: Uuid
        """
        return self._telemetry_id

    @telemetry_id.setter
    def telemetry_id(self, telemetry_id: Uuid):
        """Sets the telemetry_id of this Telemetry.


        :param telemetry_id: The telemetry_id of this Telemetry.
        :type telemetry_id: Uuid
        """
        if telemetry_id is None:
            raise ValueError("Invalid value for `telemetry_id`, must not be `None`")  # noqa: E501

        self._telemetry_id = telemetry_id

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this Telemetry.


        :return: The timestamp of this Telemetry.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this Telemetry.


        :param timestamp: The timestamp of this Telemetry.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def trip_ids(self) -> List[Uuid]:
        """Gets the trip_ids of this Telemetry.

        If telemetry occurred during a trip, the ID of the trip(s). If not in a trip, null. (in NL profile, this must always be null)  # noqa: E501

        :return: The trip_ids of this Telemetry.
        :rtype: List[Uuid]
        """
        return self._trip_ids

    @trip_ids.setter
    def trip_ids(self, trip_ids: List[Uuid]):
        """Sets the trip_ids of this Telemetry.

        If telemetry occurred during a trip, the ID of the trip(s). If not in a trip, null. (in NL profile, this must always be null)  # noqa: E501

        :param trip_ids: The trip_ids of this Telemetry.
        :type trip_ids: List[Uuid]
        """
        if trip_ids is None:
            raise ValueError("Invalid value for `trip_ids`, must not be `None`")  # noqa: E501

        self._trip_ids = trip_ids

    @property
    def journey_id(self) -> Uuid:
        """Gets the journey_id of this Telemetry.


        :return: The journey_id of this Telemetry.
        :rtype: Uuid
        """
        return self._journey_id

    @journey_id.setter
    def journey_id(self, journey_id: Uuid):
        """Sets the journey_id of this Telemetry.


        :param journey_id: The journey_id of this Telemetry.
        :type journey_id: Uuid
        """
        if journey_id is None:
            raise ValueError("Invalid value for `journey_id`, must not be `None`")  # noqa: E501

        self._journey_id = journey_id

    @property
    def location(self) -> Gps:
        """Gets the location of this Telemetry.


        :return: The location of this Telemetry.
        :rtype: Gps
        """
        return self._location

    @location.setter
    def location(self, location: Gps):
        """Sets the location of this Telemetry.


        :param location: The location of this Telemetry.
        :type location: Gps
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location
