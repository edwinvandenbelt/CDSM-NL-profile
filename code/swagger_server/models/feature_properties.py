# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.rule import Rule  # noqa: F401,E501
from swagger_server import util


class FeatureProperties(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, start: str=None, end: str=None, rules: List[Rule]=None):  # noqa: E501
        """FeatureProperties - a model defined in Swagger

        :param name: The name of this FeatureProperties.  # noqa: E501
        :type name: str
        :param start: The start of this FeatureProperties.  # noqa: E501
        :type start: str
        :param end: The end of this FeatureProperties.  # noqa: E501
        :type end: str
        :param rules: The rules of this FeatureProperties.  # noqa: E501
        :type rules: List[Rule]
        """
        self.swagger_types = {
            'name': str,
            'start': str,
            'end': str,
            'rules': List[Rule]
        }

        self.attribute_map = {
            'name': 'name',
            'start': 'start',
            'end': 'end',
            'rules': 'rules'
        }
        self._name = name
        self._start = start
        self._end = end
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The featureProperties of this FeatureProperties.  # noqa: E501
        :rtype: FeatureProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this FeatureProperties.


        :return: The name of this FeatureProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FeatureProperties.


        :param name: The name of this FeatureProperties.
        :type name: str
        """

        self._name = name

    @property
    def start(self) -> str:
        """Gets the start of this FeatureProperties.


        :return: The start of this FeatureProperties.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start: str):
        """Sets the start of this FeatureProperties.


        :param start: The start of this FeatureProperties.
        :type start: str
        """

        self._start = start

    @property
    def end(self) -> str:
        """Gets the end of this FeatureProperties.


        :return: The end of this FeatureProperties.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end: str):
        """Sets the end of this FeatureProperties.


        :param end: The end of this FeatureProperties.
        :type end: str
        """

        self._end = end

    @property
    def rules(self) -> List[Rule]:
        """Gets the rules of this FeatureProperties.


        :return: The rules of this FeatureProperties.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules: List[Rule]):
        """Sets the rules of this FeatureProperties.


        :param rules: The rules of this FeatureProperties.
        :type rules: List[Rule]
        """

        self._rules = rules
