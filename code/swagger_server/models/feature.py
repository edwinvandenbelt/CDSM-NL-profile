# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.feature_properties import FeatureProperties  # noqa: F401,E501
from swagger_server.models.one_offeature_geometry import OneOffeatureGeometry  # noqa: F401,E501
from swagger_server import util


class Feature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, id: int=None, geometry: OneOffeatureGeometry=None, properties: FeatureProperties=None):  # noqa: E501
        """Feature - a model defined in Swagger

        :param type: The type of this Feature.  # noqa: E501
        :type type: str
        :param id: The id of this Feature.  # noqa: E501
        :type id: int
        :param geometry: The geometry of this Feature.  # noqa: E501
        :type geometry: OneOffeatureGeometry
        :param properties: The properties of this Feature.  # noqa: E501
        :type properties: FeatureProperties
        """
        self.swagger_types = {
            'type': str,
            'id': int,
            'geometry': OneOffeatureGeometry,
            'properties': FeatureProperties
        }

        self.attribute_map = {
            'type': 'type',
            'id': 'id',
            'geometry': 'geometry',
            'properties': 'properties'
        }
        self._type = type
        self._id = id
        self._geometry = geometry
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The feature of this Feature.  # noqa: E501
        :rtype: Feature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Feature.


        :return: The type of this Feature.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Feature.


        :param type: The type of this Feature.
        :type type: str
        """
        allowed_values = ["Feature"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self) -> int:
        """Gets the id of this Feature.


        :return: The id of this Feature.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Feature.


        :param id: The id of this Feature.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def geometry(self) -> OneOffeatureGeometry:
        """Gets the geometry of this Feature.


        :return: The geometry of this Feature.
        :rtype: OneOffeatureGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry: OneOffeatureGeometry):
        """Sets the geometry of this Feature.


        :param geometry: The geometry of this Feature.
        :type geometry: OneOffeatureGeometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def properties(self) -> FeatureProperties:
        """Gets the properties of this Feature.


        :return: The properties of this Feature.
        :rtype: FeatureProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties: FeatureProperties):
        """Sets the properties of this Feature.


        :param properties: The properties of this Feature.
        :type properties: FeatureProperties
        """

        self._properties = properties
