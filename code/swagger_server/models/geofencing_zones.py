# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.geofencing_zones_data import GeofencingZonesData  # noqa: F401,E501
from swagger_server import util


class GeofencingZones(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, last_updated: float=None, ttl: float=None, version: str='2.3', data: GeofencingZonesData=None):  # noqa: E501
        """GeofencingZones - a model defined in Swagger

        :param last_updated: The last_updated of this GeofencingZones.  # noqa: E501
        :type last_updated: float
        :param ttl: The ttl of this GeofencingZones.  # noqa: E501
        :type ttl: float
        :param version: The version of this GeofencingZones.  # noqa: E501
        :type version: str
        :param data: The data of this GeofencingZones.  # noqa: E501
        :type data: GeofencingZonesData
        """
        self.swagger_types = {
            'last_updated': float,
            'ttl': float,
            'version': str,
            'data': GeofencingZonesData
        }

        self.attribute_map = {
            'last_updated': 'last_updated',
            'ttl': 'ttl',
            'version': 'version',
            'data': 'data'
        }
        self._last_updated = last_updated
        self._ttl = ttl
        self._version = version
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'GeofencingZones':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The geofencing_zones of this GeofencingZones.  # noqa: E501
        :rtype: GeofencingZones
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated(self) -> float:
        """Gets the last_updated of this GeofencingZones.


        :return: The last_updated of this GeofencingZones.
        :rtype: float
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: float):
        """Sets the last_updated of this GeofencingZones.


        :param last_updated: The last_updated of this GeofencingZones.
        :type last_updated: float
        """

        self._last_updated = last_updated

    @property
    def ttl(self) -> float:
        """Gets the ttl of this GeofencingZones.


        :return: The ttl of this GeofencingZones.
        :rtype: float
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl: float):
        """Sets the ttl of this GeofencingZones.


        :param ttl: The ttl of this GeofencingZones.
        :type ttl: float
        """

        self._ttl = ttl

    @property
    def version(self) -> str:
        """Gets the version of this GeofencingZones.


        :return: The version of this GeofencingZones.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this GeofencingZones.


        :param version: The version of this GeofencingZones.
        :type version: str
        """

        self._version = version

    @property
    def data(self) -> GeofencingZonesData:
        """Gets the data of this GeofencingZones.


        :return: The data of this GeofencingZones.
        :rtype: GeofencingZonesData
        """
        return self._data

    @data.setter
    def data(self, data: GeofencingZonesData):
        """Sets the data of this GeofencingZones.


        :param data: The data of this GeofencingZones.
        :type data: GeofencingZonesData
        """

        self._data = data
